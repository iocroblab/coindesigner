# - Find a Simage installation
# The current version of FindSimage requires pkg-config to find simage.
# If the variable Simage_DIR is set, ${Simage_DIR}/lib/pkgconfig will
# be added to the pkg-config search path.
#
# The following scenarios have been testet and are (probably) working:
#   - Running Windows CMake from cygwin shell with cygwin supplied pkg-config
#     and simage.pc generated by autotools (containing unix style paths),
#     generating NMake Makefiles.
#
#   - Running Windows CMake from Windows shell with cygwin supplied
#     pkg-config, cygpath in PATH and simage.pc generated by autotools
#     (containing unix style paths), generating NMake Makefiles.
#
#   - Running Windows CMake from Windows shell with Windows port of pkg-config
#     distributed with GTK+ and simage.pc generated by autotools (containing
#     unix style paths), generating NMake Makefiles.
#
#   - Running Windows CMake from cygwin shell with Windows port of pkg-config
#     distributed with GTK+ and simage.pc generated by autotools (containing
#     unix style paths), generating NMake Makefiles. In this instance
#     Simage_DIR must be set as a Windows style path.
#
# The following variables are set if Simage is found.  If Simage is not
# found, Simage_FOUND is set to false.
#  Simage_FOUND          - Set to true when Simage is found
#  Simage_VERSION_STRING - The Simage version number
#  Simage_INCLUDE_DIRS   - Include directories for Simage
#  Simage_LIBRARY_DIRS   - Link directories for Simage
#  Simage_LIBRARIES      - Libriaries that must be linked
#  Simage_LIBRARY        - Same as Simage_LIBRARIES
#  Simage_DEFINITIONS    - Define flags to the compiler
#

IF(USE_SIM_FIND)
  # FIXME: Experimental find mechanism. Should be tested on several platforms with several
  # configurations and someone extended before becomming the one and only thing. 20081105 larsm
  INCLUDE(SimFind)
  SIM_FIND(simage RELEASELIBNAMES simage1 simage
                  DEBUGLIBNAMES simage1d simaged
                  INCLUDEFILE simage.h)
ELSE(USE_SIM_FIND)
  find_package(PkgConfig QUIET)

  if(PKG_CONFIG_FOUND)
     pkg_check_modules(SIMAGE QUIET simage)
  endif()

  IF (PKG_CONFIG_FOUND)
    IF (Simage_DIR)
      SET(Simage_OLD_PKG_CONFIG_PATH $ENV{PKG_CONFIG_PATH})
      SET(ENV{PKG_CONFIG_PATH} "${Simage_DIR}/lib/pkgconfig")
    ENDIF (Simage_DIR)

    MESSAGE(STATUS "PKG_CONFIG_PATH: " $ENV{PKG_CONFIG_PATH})
    pkg_search_module(Simage simage)

    # restore old PKG_CONFIG_PATH
    IF (Simage_DIR)
      SET(EVN{PKG_CONFIG_PATH} ${Simage_OLD_PKG_CONFIG_PATH})
    ENDIF (Simage_DIR)

    IF (Simage_FOUND)
      IF (NOT Simage_FIND_QUIETLY)
        MESSAGE(STATUS "Simage located using pkg-config.")
      ENDIF (NOT Simage_FIND_QUIETLY)

      SET(Simage_DEFINITIONS ${Simage_CFLAGS_OTHER})
      SET(Simage_VERSION_STRING ${Simage_VERSION})

      IF (MSVC)
        # convert gcc style defines to MSVC style defines
        STRING(REPLACE "-D" "/D" Simage_DEFINITIONS ${Simage_DEFINITIONS})

        # If "cygpath" is available, try to convert unix style paths
        # to win style paths. If the paths are win style to begin with
        # "cygpath" will do nothing. If "cygpath" isn't available, the
        # paths are not likely to be unix style anyway.
        FIND_PROGRAM(Simage_CYGPATH cygpath)
        IF (Simage_CYGPATH)

          # convert unix style include paths to win include paths
          EXECUTE_PROCESS(COMMAND ${Simage_CYGPATH} -w ${Simage_INCLUDE_DIRS}
                          OUTPUT_VARIABLE Simage_INCLUDE_DIRS
                          OUTPUT_STRIP_TRAILING_WHITESPACE)

          # make sure all includes stays on one line
          STRING(REGEX REPLACE "\n" " " Simage_INCLUDE_DIRS "${Simage_INCLUDE_DIRS}")

          # convert unix style libdir paths to win libdir paths
          EXECUTE_PROCESS(COMMAND ${Simage_CYGPATH} -w ${Simage_LIBRARY_DIRS}
                          OUTPUT_VARIABLE Simage_LIBRARY_DIRS
                          OUTPUT_STRIP_TRAILING_WHITESPACE)

          # make sure all libdirs stays on one line
          STRING(REGEX REPLACE "\n" " " Simage_LIBRARY_DIRS "${Simage_LIBRARY_DIRS}")

        ENDIF (Simage_CYGPATH)

      ENDIF (MSVC)
      SET(Simage_LIBRARY ${Simage_LIBRARIES})
   ELSE(Simage_FOUND)
        MESSAGE(STATUS "Couldn't locate simage using pkg-config.")
   ENDIF(Simage_FOUND)
  ELSE(PKG_CONFIG_FOUND)
     MESSAGE(STATUS "Couldn't locate pkg-config to locate simage.")
  ENDIF(PKG_CONFIG_FOUND)

  IF(NOT Simage_FOUND)
   #we don't have simage yet
      MESSAGE(STATUS "Trying to find simage via simage-config.")
      execute_process (COMMAND simage-config --libs
                     OUTPUT_VARIABLE Simage_LIBRARIES
                     OUTPUT_STRIP_TRAILING_WHITESPACE)

      IF(Simage_LIBRARIES)
         message(STATUS "simage-config found: simage libs are ${Simage_LIBRARIES}")
         # make sure all includes stays on one line
         STRING(REGEX REPLACE "\n" " " Simage_LIBRARIES "${Simage_LIBRARIES}")
         #  Simage_FOUND          - Set to true when Simage is found
         #  Simage_LIBRARIES      - Libriaries that must be linked
         #  Simage_LIBRARY        - Same as Simage_LIBRARIES
         set(Simage_FOUND YES)
         set(Simage_LIBRARY ${Simage_LIBRARIES})
   ####### Simage_VERSION_STRING - The Simage version number
         # convert unix style libdir paths to win libdir paths
         execute_process (COMMAND simage-config --version
                        OUTPUT_VARIABLE Simage_VERSION_STRING
                        OUTPUT_STRIP_TRAILING_WHITESPACE)

   #######  Simage_INCLUDE_DIRS   - Include directories for Simage
         execute_process (COMMAND simage-config --cflags
                        OUTPUT_VARIABLE Simage_INCLUDE_DIRS
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
         # make sure all includes stays on one line
         STRING(REGEX REPLACE "\n" " " Simage_INCLUDE_DIRS "${Simage_INCLUDE_DIRS}")

   #######  Simage_LIBRARY_DIRS   - Link directories for Simage
         # convert unix style libdir paths to win libdir paths
         execute_process (COMMAND simage-config --ldflags
                        OUTPUT_VARIABLE Simage_LIBRARY_DIRS
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
         # make sure all includes stays on one line
         STRING(REGEX REPLACE "\n" " " Simage_LIBRARY_DIRS "${Simage_LIBRARY_DIRS}")

   #######  Simage_DEFINITIONS    - Define flags to the compiler
         execute_process (COMMAND simage-config --cppflags
                        OUTPUT_VARIABLE Simage_DEFINITIONS
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
         # make sure all includes stays on one line
         STRING(REGEX REPLACE "\n" " " Simage_DEFINITIONS "${Simage_DEFINITIONS}")
      ELSE(Simage_LIBRARIES)
### Trying another strategy
         find_path(Simage_INCLUDE_DIRS simage.h
               ${CMAKE_INCLUDE_PATH}
               /usr/local/include
               /usr/include
               $ENV{ProgramFiles}/include)

         if(Simage_INCLUDE_DIRS)
            message(STATUS "Looking for Simage headers -- found " ${Simage_INCLUDE_DIRS}/simage.h)
            find_library(Simage_LIBRARIES
               NAMES simage simage1 simage20 simage40 libsimage
               HINTS
               ${CMAKE_LIBRARY_PATH}
               $ENV{COIN3DDIR}/lib
               /usr/local/lib
               /usr/lib
               $ENV{ProgramFiles}/lib
               $ENV{COINDIR}/lib)
            if(Simage_LIBRARIES)
               message(STATUS "simage lib found at ${Simage_LIBRARIES}")
               set(Simage_FOUND YES)
            else(Simage_LIBRARIES)
               if(WIN32)
                  find_path(Simage_LIB simage.dll
                        ${CMAKE_BINARY_DIR}
                        $ENV{ProgramFiles}/lib
                        ${CMAKE_LIBRARY_PATH}
                        $ENV{COIN3DDIR}/lib
                        $ENV{ProgramFiles}/Coin3D-2/lib
                        $ENV{COINDIR}/lib   )
                  if(Simage_LIB)
                     message(STATUS "Simage.dll found")
                     set(Simage_FOUND YES)
                     set(Simage_DEFINITIONS -DSIMAGE_DLL)
                     set(Simage_LIBRARIES -lsimage.dll)
                  else(Simage_LIB)
                     find_path(Simage_LIB simage.lib
                        ${CMAKE_BINARY_DIR}
                        $ENV{ProgramFiles}/lib
                        ${CMAKE_LIBRARY_PATH}
                        $ENV{COIN3DDIR}/lib
                        $ENV{ProgramFiles}/Coin3D-2/lib
                        $ENV{COINDIR}/lib   )
                     if(Simage_LIB)
                        message(STATUS "Simage.lib found")
                        set(Simage_FOUND YES)
                        set(Simage_DEFINITIONS -DSIMAGE_NOT_DLL)
                        set(Simage_LIBRARIES -lsimage.lib)
                     endif(Simage_LIB)
                  endif(Simage_LIB)
               else(WIN32) # UNIX?
                  find_path(Simage_LIB libsimage.a
                        ${CMAKE_BINARY_DIR}
                        /usr/lib
                        /usr/local/lib)
                  if(Simage_LIB)
                     message(STATUS "Found simage at ${Simage_LIB}/libsimage.a")
                     set(Simage_FOUND YES)
                     set(Simage_LIBRARIES -lsimage)
                  else(Simage_LIB)
                     find_path(Simage_LIB libsimage.so
                        ${CMAKE_BINARY_DIR}
                        /usr/lib
                        /usr/local/lib)
                     if(Simage_LIB)
                        message(STATUS "Found simage at ${Simage_LIB}/libsimage.so")
                        set(Simage_FOUND YES)
                        set(Simage_LIBRARIES -lsimage)
                     endif(Simage_LIB)
                  endif(Simage_LIB)
               endif(WIN32) # UNIX?
            endif(Simage_LIBRARIES)
            set(Simage_LIBRARY ${Simage_LIBRARIES})
         else(Simage_INCLUDE_DIRS )
            IF (Simage_FIND_REQUIRED)
               MESSAGE(FATAL_ERROR "FindSimage.cmake couldn't find simage libs neither via pkg-config or simage-config")
            ELSE (Simage_FIND_REQUIRED)
               MESSAGE(STATUS "FindSimage.cmake couldn't find simage")
            ENDIF (Simage_FIND_REQUIRED)
         endif(Simage_INCLUDE_DIRS)
      ENDIF(Simage_LIBRARIES)
   ENDIF(NOT Simage_FOUND)
ENDIF(USE_SIM_FIND)


